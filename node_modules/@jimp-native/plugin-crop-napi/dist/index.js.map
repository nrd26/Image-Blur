{"version":3,"file":"index.js","names":["addon","require","getAddonReleaseVersion","crop","x","y","w","h","cb","self","Math","max","ensureInteger","min","getWidth","getHeight","updateBitmap","bitmap","data","slice","width","height","skip","call","prependUpdate","originalCallback","err","throwError","cppCallbackWrapper","autocrop","arg1","arg2","arg3","leaveBorder","tolerance","cropOnlyFrames","symmetric","north","east","south","west","cropSymmetric","ignoreSides","image","newWidth","newHeight","bind","plugin","cropAsync","wrapAsync","autocropAsync"],"sources":["../src/index.ts"],"sourcesContent":["import { throwError } from \"@jimp/utils\";\nimport { Crop } from \"@jimp/plugin-crop\";\nimport { ImageCallback } from \"@jimp/core\";\nimport {\n  ensureInteger,\n  getAddonReleaseVersion,\n  cppCallbackWrapper,\n  AsyncPlugin,\n  wrapAsync,\n} from \"@jimp-native/utils-ts\";\n\ntype CropPlugin = AsyncPlugin<Crop[\"class\"]>;\n\nconst addon = require(`../build/${getAddonReleaseVersion()}/plugin-crop-napi.node`);\n\nconst crop = function (\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  cb?: ImageCallback<CropPlugin>\n) {\n  const self = this;\n\n  try {\n    x = Math.max(ensureInteger(x), 0);\n    y = Math.max(ensureInteger(y), 0);\n    w = Math.min(ensureInteger(w), self.getWidth());\n    h = Math.min(ensureInteger(h), self.getHeight());\n\n    const updateBitmap = () => {\n      self.bitmap.data = self.bitmap.data.slice(0, w * h * 4);\n      self.bitmap.width = w;\n      self.bitmap.height = h;\n    };\n\n    const skip = x === 0 && y === 0 && w === self.getWidth();\n\n    if (skip) {\n      // If X and Y is zero and w is the full image width then we can just cut the buffer to size.\n      updateBitmap();\n\n      if (typeof cb === \"function\") {\n        cb.call(self, null, self);\n      }\n\n      return self;\n    }\n\n    const prependUpdate = typeof cb === \"function\";\n    if (prependUpdate) {\n      const originalCallback = cb;\n      // Ensures updateBitmap gets called before the image gets to user code.\n      cb = (err) => {\n        if (err) {\n          return throwError.call(self, err, cb);\n        }\n\n        updateBitmap();\n        originalCallback.call(self, null, self);\n      };\n    }\n\n    addon.crop(\n      self.bitmap.data,\n      self.getWidth(),\n      self.getHeight(),\n      x,\n      y,\n      w,\n      h,\n      cppCallbackWrapper(self, cb)\n    );\n\n    if (!prependUpdate) {\n      updateBitmap();\n    }\n\n    return self;\n  } catch (err) {\n    return throwError.call(this, err, cb);\n  }\n};\n\nconst autocrop = function (\n  arg1:\n    | {\n        tolerance?: number;\n        cropOnlyFrames?: boolean;\n        cropSymmetric?: boolean;\n        leaveBorder?: number;\n        ignoreSides?: {\n          north: boolean;\n          south: boolean;\n          east: boolean;\n          west: boolean;\n        };\n      }\n    | number\n    | boolean\n    | ImageCallback<CropPlugin> = {},\n  arg2?: ImageCallback<CropPlugin> | boolean,\n  arg3?: ImageCallback<CropPlugin>\n) {\n  let cb: ImageCallback<CropPlugin>;\n  let leaveBorder = 0;\n  let tolerance = 0.0002;\n  let cropOnlyFrames = true;\n  let symmetric = false;\n\n  let north = true;\n  let east = true;\n  let south = true;\n  let west = true;\n\n  if (typeof arg1 === \"object\") {\n    tolerance = arg1?.tolerance ?? tolerance;\n    leaveBorder = arg1?.leaveBorder ?? leaveBorder;\n    cropOnlyFrames = arg1?.cropOnlyFrames ?? cropOnlyFrames;\n    symmetric = arg1?.cropSymmetric ?? symmetric;\n\n    north = !arg1?.ignoreSides?.north;\n    east = !arg1?.ignoreSides?.east;\n    south = !arg1?.ignoreSides?.south;\n    west = !arg1?.ignoreSides?.west;\n  }\n\n  if (typeof arg1 === \"number\") {\n    tolerance = arg1;\n  }\n\n  if (typeof arg1 === \"boolean\") {\n    cropOnlyFrames = arg1;\n  }\n\n  if (typeof arg2 === \"boolean\") {\n    cropOnlyFrames = arg2;\n  }\n\n  if (typeof arg1 === \"function\") {\n    cb = arg1;\n  }\n\n  if (typeof arg2 === \"function\") {\n    cb = arg2;\n  }\n\n  if (typeof arg3 === \"function\") {\n    cb = arg3;\n  }\n\n  const updateBitmap = () => {\n    this.bitmap.data = this.bitmap.data.slice(\n      0,\n      this.bitmap.width * this.bitmap.height * 4\n    );\n  };\n\n  const prependUpdate = typeof cb === \"function\";\n  if (prependUpdate) {\n    const originalCallback = cb;\n\n    // Ensures updateBitmap gets called before the image gets to user code.\n    cb = function (err, image, newWidth, newHeight) {\n      if (err) {\n        return originalCallback.call(this, err, null);\n      }\n\n      this.bitmap.width = newWidth;\n      this.bitmap.height = newHeight;\n      updateBitmap();\n      originalCallback.call(this, null, this);\n    } as ImageCallback<CropPlugin>;\n\n    cb.bind(this);\n  }\n\n  try {\n    addon.autocrop(\n      this.bitmap.data,\n      this.getWidth(),\n      this.getHeight(),\n      ensureInteger(leaveBorder),\n      tolerance,\n      cropOnlyFrames,\n      symmetric,\n      north,\n      east,\n      south,\n      west,\n      this.bitmap,\n      cppCallbackWrapper(this, cb)\n    );\n\n    if (!prependUpdate) {\n      updateBitmap();\n    }\n\n    return this;\n  } catch (err) {\n    return throwError.call(this, err, cb);\n  }\n};\n\nconst plugin: () => Omit<CropPlugin, \"cropQuiet\" | \"cropQuietAsync\"> = () => ({\n  crop,\n  cropAsync: wrapAsync(crop),\n  autocrop,\n  autocropAsync: wrapAsync(autocrop),\n});\n\nexport default plugin;\n"],"mappings":"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"}