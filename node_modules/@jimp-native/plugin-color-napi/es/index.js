function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { throwError } from "@jimp/utils";
import color from "@jimp/plugin-color";
import { ensureInteger, getAddonReleaseVersion, cppCallbackWrapper, wrapAsync, EdgeHandling } from "@jimp-native/utils-ts";
var addon = require("../build/".concat(getAddonReleaseVersion(), "/plugin-color-napi.node"));
var PIXELATE_KERNEL = [[1 / 16, 2 / 16, 1 / 16], [2 / 16, 4 / 16, 2 / 16], [1 / 16, 2 / 16, 1 / 16]];
var greyscale = function greyscale(cb) {
  try {
    addon.greyscale(this.bitmap.data, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var brightness = function brightness(_brightness, cb) {
  try {
    addon.brightness(this.bitmap.data, _brightness, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var opacity = function opacity(_opacity, cb) {
  try {
    addon.opacity(this.bitmap.data, _opacity, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var opaque = function opaque(cb) {
  try {
    addon.opaque(this.bitmap.data, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var fade = function fade(f, cb) {
  return opacity.bind(this)(1 - f, cb);
};
var contrast = function contrast(_contrast, cb) {
  try {
    addon.contrast(this.bitmap.data, _contrast, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var posterize = function posterize(multiplier, cb) {
  try {
    addon.posterize(this.bitmap.data, multiplier, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var sepia = function sepia(cb) {
  try {
    addon.sepia(this.bitmap.data, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var convolution = function convolution(kernel) {
  var edgeHandling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EdgeHandling.EDGE_EXTEND;
  var cb = arguments.length > 2 ? arguments[2] : undefined;
  if (typeof edgeHandling === "function") {
    cb = edgeHandling;
    edgeHandling = EdgeHandling.EDGE_EXTEND;
  }
  try {
    addon.convolution(this.bitmap.data, this.getWidth(), this.getHeight(), kernel, edgeHandling, 0, 0, this.getWidth(), this.getHeight(), 1, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var convolute = function convolute(kernel, x, y, w, h, cb) {
  if (typeof x === "function") {
    cb = x;
    x = 0;
  }
  try {
    var _x;
    addon.convolution(this.bitmap.data, this.getWidth(), this.getHeight(), kernel, EdgeHandling.EDGE_EXTEND, ensureInteger((_x = x) !== null && _x !== void 0 ? _x : 0), ensureInteger(y !== null && y !== void 0 ? y : 0), ensureInteger(w !== null && w !== void 0 ? w : this.getWidth()), ensureInteger(h !== null && h !== void 0 ? h : this.getHeight()), 1, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var pixelate = function pixelate(size, x, y, w, h, cb) {
  var _x2, _y;
  if (typeof x === "function") {
    cb = x;
    x = null;
    y = null;
    w = null;
    h = null;
  }
  x = (_x2 = x) !== null && _x2 !== void 0 ? _x2 : 0;
  y = (_y = y) !== null && _y !== void 0 ? _y : 0;
  w = w || this.bitmap.width - ensureInteger(x);
  h = h || this.bitmap.height - ensureInteger(y);
  try {
    addon.convolution(this.bitmap.data, this.getWidth(), this.getHeight(), PIXELATE_KERNEL, EdgeHandling.EDGE_EXTEND, ensureInteger(x), ensureInteger(y), ensureInteger(w), ensureInteger(h), size, cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var plugin = function plugin() {
  return _objectSpread(_objectSpread({}, color()), {}, {
    // Merge with original implementation as our C++ coverage of color is not complete
    greyscale: greyscale,
    greyscaleAsync: wrapAsync(greyscale),
    grayscale: greyscale,
    grayscaleAsync: wrapAsync(greyscale),
    brightness: brightness,
    brightnessAsync: wrapAsync(brightness),
    opacity: opacity,
    opacityAsync: wrapAsync(opacity),
    opaque: opaque,
    opaqueAsync: wrapAsync(opaque),
    fade: fade,
    fadeAsync: wrapAsync(fade),
    contrast: contrast,
    contrastAsync: wrapAsync(contrast),
    posterize: posterize,
    posterizeAsync: wrapAsync(posterize),
    sepia: sepia,
    sepiaAsync: wrapAsync(sepia),
    convolution: convolution,
    convolutionAsync: wrapAsync(convolution),
    convolute: convolute,
    convoluteAsync: wrapAsync(convolute),
    pixelate: pixelate,
    pixelateAsync: wrapAsync(pixelate)
  });
};
export default plugin;
//# sourceMappingURL=index.js.map