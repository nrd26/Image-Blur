"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("@jimp/utils");
var _utilsTs = require("@jimp-native/utils-ts");
var _jimp = _interopRequireDefault(require("jimp"));
var _BLEND_MODE_MAP;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var addon = require("../build/".concat((0, _utilsTs.getAddonReleaseVersion)(), "/plugin-composite-napi.node"));
var BLEND_MODE_MAP = (_BLEND_MODE_MAP = {}, _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_SOURCE_OVER, 0), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_DESTINATION_OVER, 1), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_MULTIPLY, 2), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_ADD, 3), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_SCREEN, 4), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_OVERLAY, 5), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_DARKEN, 6), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_LIGHTEN, 7), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_HARDLIGHT, 8), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_DIFFERENCE, 9), _defineProperty(_BLEND_MODE_MAP, _jimp["default"].BLEND_EXCLUSION, 10), _BLEND_MODE_MAP);
var composite = function composite(sourceImage, x, y) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var cb = arguments.length > 4 ? arguments[4] : undefined;
  if (typeof options === "function") {
    cb = options;
    options = {};
  }
  if (!(sourceImage instanceof this.constructor)) {
    return _utils.throwError.call(this, "sourceImage must be a Jimp image");
  }
  var _options = options,
    mode = _options.mode,
    opacitySource = _options.opacitySource,
    opacityDest = _options.opacityDest;
  if (typeof opacitySource !== "number" || opacitySource < 0 || opacitySource > 1) {
    opacitySource = 1.0;
  }
  if (typeof opacityDest !== "number" || opacityDest < 0 || opacityDest > 1) {
    opacityDest = 1.0;
  }
  if (opacityDest !== 1.0) {
    this.opacity(opacityDest);
  }
  if (!mode) {
    mode = _jimp["default"].BLEND_SOURCE_OVER;
  }
  try {
    var _opacitySource;
    addon.composite(sourceImage.bitmap.data, sourceImage.getWidth(), sourceImage.getHeight(), this.bitmap.data, this.getWidth(), this.getHeight(), (0, _utilsTs.ensureInteger)(x), (0, _utilsTs.ensureInteger)(y), BLEND_MODE_MAP[mode] || BLEND_MODE_MAP[_jimp["default"].BLEND_SOURCE_OVER], (_opacitySource = opacitySource) !== null && _opacitySource !== void 0 ? _opacitySource : 1.0, (0, _utilsTs.cppCallbackWrapper)(this, cb));
    return this;
  } catch (err) {
    return _utils.throwError.call(this, err, cb);
  }
};
var plugin = function plugin() {
  return {
    composite: composite,
    compositeAsync: (0, _utilsTs.wrapAsync)(composite)
  };
};
var _default = plugin;
exports["default"] = _default;
module.exports = exports.default;
//# sourceMappingURL=index.js.map