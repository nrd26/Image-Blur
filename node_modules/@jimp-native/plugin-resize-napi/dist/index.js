"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("@jimp/utils");
var _utilsTs = require("@jimp-native/utils-ts");
var addon = require("../build/".concat((0, _utilsTs.getAddonReleaseVersion)(), "/plugin-resize-napi.node"));
var RESIZE_METHOD_MAP = {
  nearestNeighbor: 0,
  nearestNeighbour: 0,
  bilinearInterpolation: 1,
  bicubicInterpolation: 2,
  hermiteInterpolation: 3,
  bezierInterpolation: 4,
  defaultInterpolation: 99
};
function resize(width, height) {
  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "defaultInterpolation";
  var cb = arguments.length > 3 ? arguments[3] : undefined;
  if (typeof mode === "function" && typeof cb === "undefined") {
    cb = mode;
    mode = "defaultInterpolation";
  }
  if (width === this.constructor.AUTO) {
    width = this.bitmap.width * (height / this.bitmap.height);
  }
  if (height === this.constructor.AUTO) {
    height = this.bitmap.height * (width / this.bitmap.width);
  }
  if (width <= 0) {
    return _utils.throwError.call(this, "Width must be greater than zero", cb);
  }
  if (height <= 0) {
    return _utils.throwError.call(this, "Height must be greater than zero", cb);
  }
  var modeNumber = RESIZE_METHOD_MAP[mode];
  if (typeof modeNumber !== "number") {
    modeNumber = 99;
  }
  width = (0, _utilsTs.ensureInteger)(width);
  height = (0, _utilsTs.ensureInteger)(height);
  var targetBitmapData = Buffer.alloc(width * height * 4);
  try {
    var originalBitmap = this.bitmap.data;
    var originalWidth = this.bitmap.width;
    var originalHeight = this.bitmap.height;
    this.bitmap.data = targetBitmapData;
    this.bitmap.width = width;
    this.bitmap.height = height;
    addon.resize(originalBitmap, originalWidth, originalHeight, targetBitmapData, width, height, modeNumber, (0, _utilsTs.cppCallbackWrapper)(this, cb));
    return this;
  } catch (err) {
    return _utils.throwError.call(this, err, cb);
  }
}
var plugin = function plugin() {
  return {
    constants: {
      RESIZE_NEAREST_NEIGHBOR: "nearestNeighbor",
      RESIZE_BILINEAR: "bilinearInterpolation",
      RESIZE_BICUBIC: "bicubicInterpolation",
      RESIZE_HERMITE: "hermiteInterpolation",
      RESIZE_BEZIER: "bezierInterpolation"
    },
    "class": {
      resize: resize,
      resizeAsync: (0, _utilsTs.wrapAsync)(resize)
    }
  };
};
var _default = plugin;
exports["default"] = _default;
module.exports = exports.default;
//# sourceMappingURL=index.js.map