import { throwError } from "@jimp/utils";
import { ensureInteger, getAddonReleaseVersion, cppCallbackWrapper, wrapAsync } from "@jimp-native/utils-ts";
var addon = require("../build/".concat(getAddonReleaseVersion(), "/plugin-mask-napi.node"));
var mask = function mask(sourceImage) {
  var xOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var yOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var cb = arguments.length > 3 ? arguments[3] : undefined;
  if (!(sourceImage instanceof this.constructor)) {
    return throwError.call(this, "sourceImage must be a Jimp image");
  }
  try {
    addon.mask(sourceImage.bitmap.data, sourceImage.getWidth(), sourceImage.getHeight(), this.bitmap.data, this.getWidth(), this.getHeight(), ensureInteger(xOffset), ensureInteger(yOffset), cppCallbackWrapper(this, cb));
    return this;
  } catch (err) {
    return throwError.call(this, err, cb);
  }
};
var plugin = function plugin() {
  return {
    mask: mask,
    maskAsync: wrapAsync(mask)
  };
};
export default plugin;
//# sourceMappingURL=index.js.map